package database;

import model.Actor;
import model.Personaje;
import model.UserKeys;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;


//Imports para pruebas en main
import javax.sql.DataSource;

import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;
//---

public class PersonajeMapper extends AbstractMapper<Personaje,UserKeys>{

	public PersonajeMapper(DataSource dataSource) {
		super(dataSource);
		// TODO Auto-generated constructor stub
	}

	@Override
	protected String getTableName() {
		// TODO Auto-generated method stub
		return model.Constants.PERSONAJE_TABLE;
	}

	@Override
	protected String[] getColumnNames() {
		// TODO Auto-generated method stub
		return new String[]{"id_personaje", "nombre", "descripcion"};
	}
	
	//@SuppressWarnings("null")
	@Override
	protected Personaje buildObject(ResultSet rs) throws SQLException {
		Personaje result = new Personaje();
		result.setId_personaje(rs.getLong("id_personaje"));
		result.setNombre(rs.getString("nombre"));
		result.setDescr(rs.getString("descripcion"));
		return result;
	}

	@Override
	protected Object[] serializeKey(UserKeys key) {
		// TODO Auto-generated method stub
		return new Object[] { key.getKey() };
	}

	@Override
	protected Object[] serializeObject(Personaje object) {
		// TODO Auto-generated method stub
		return new Object[] {object.getId_personaje(),object.getNombre(),object.getDescr()};
	}

	@Override
	protected String[] getKeyColumnNames() {
		// TODO Auto-generated method stub
		String[] keyCol={"id_personaje"};
		return keyCol;
	}

	@Override
	protected UserKeys getKey(Personaje obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected void fill(PreparedStatement pst, Personaje obj, boolean ins) {
		// TODO Auto-generated method stub
		try {	
			pst.setLong(1, obj.getId_personaje());// ? id_pers
			pst.setString(2,obj.getNombre());// ? nombre
			pst.setString(3,obj.getDescr());// ? descr
			if(!ins){//si es update necesitamos rellenar la condicion where con el nick .
				pst.setLong(4, obj.getId_personaje());
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	protected String pharseUpdate() {
		String colNam[] = getColumnNames();
		String str = colNam[0]+"= ? ,"+colNam[1]+"= ? ,"+colNam[2]+"= ? where "+colNam[0]+"= ? ";
		return str;
	}

	@Override
	protected String pharseInsert() {
		String colNam[] = getColumnNames();
		String str = " ("+colNam[0]+","+colNam[1]+","+colNam[2]+")"
		+ " values " + " ( ?  , ? , ? ) ";
		return str;
	}
	public long getLastIndexInsert() {
		Connection con =null;
		PreparedStatement pst=null;
		ResultSet rs=null;
		Long result=null;
		try{
			con= ds.getConnection();//Attempts to establish a connection with the data source that this DataSource object represents.
			String sql="SELECT MAX( id_personaje ) AS id FROM personajes";
			pst = con.prepareStatement(sql);//An object that represents a pre-compiled SQL statement. 
			rs=pst.executeQuery();//Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query
			
			while(rs.next()){	
				result = rs.getLong("id");
			}
		}catch (SQLException e){
			e.printStackTrace();
		}finally{
			try{
				if(rs!=null) rs.close();
				if(pst!=null) pst.close();
				if(con!=null) con.close();
			}catch (Exception e){}
		}
		return result;
	}
	/**
	 * Metodo que devuelve un ArrayList de PersonajeActor (clase auxiliar del modelo que tiene nombre actor y su personaje)
	 * Al pasarle una id de un episodio , el metodo busca los nombres de los actrores  y de sus personajes de dicho episodio y los devuelve
	 * en un ArrayList
	 * @param id de un episodio
	 * @return ArrayList PersonajeActor
	 */
	public List<Personaje> listaPersonajes(){	
		Connection con =null;
		PreparedStatement pst=null;
		ResultSet rs=null;
		Personaje result=null;
		List<Personaje> objList = new ArrayList<Personaje>();
		try{
			con= ds.getConnection();//Attempts to establish a connection with the data source that this DataSource object represents.
			String sql=null;
			
			sql ="select * from personajes" ;
			System.out.println(sql);
			
			pst = con.prepareStatement(sql);//An object that represents a pre-compiled SQL statement. 
			
			rs=pst.executeQuery();//Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query
			
			while(rs.next()){	
				result = this.buildObject(rs);//build the object obtain from the select
				objList.add(result);
			}
		}catch (SQLException e){
			e.printStackTrace();
		}finally{
			try{
				if(rs!=null) rs.close();
				if(pst!=null) pst.close();
				if(con!=null) con.close();
			}catch (Exception e){}
		}
		return objList;
	}
	public static void main(String args[])
	        throws Exception
	    {
	 
	 //creamos y configuramos un objeto data source:
	 MysqlDataSource mysqlDataSource = new MysqlDataSource();
	 mysqlDataSource.setServerName("localhost");
	 mysqlDataSource.setDatabaseName("practica11");
	 mysqlDataSource.setPort(3306);
	 mysqlDataSource.setUser("root");
	 mysqlDataSource.setPassword("");
	 //establecemos la conexión con la BBDD, esto ya se hace dentro de cada una de las funciones antes listadas por eso prescindimos
	 //Connection con = mysqlDataSource .getConnection();
	 
	 //creamos un usuarioMapper, pasandole un objeto DataSource
	 PersonajeMapper mapPer = new PersonajeMapper( mysqlDataSource);
	
	 long id = 9223372036854775799L;//La L "the compiler will try to parse the literal as an int, hence the error message"
	 
	 //Ejemplo Insert
	 Personaje per=new Personaje(id,"Bart","Es un...");
	 mapPer.Insert(per);	
	 
	
	 //Ejemplo Update
	 //Personaje per2=new Personaje(id,"Lisa","Es una...");
	 //mapPer.update(per2);
	 
	 //obligatorio para utiliar id´s 
	 //UserKeys keyPer = new UserKeys(id);
	  
	 //Ejemplos Delete
	  // mapPer.Delete(keyPer);
	 
	 //Ejemplos select
	   // Personaje per3 = new Personaje();
	   // per3 = mapPer.findById(keyPer);
	
	   // System.out.println(per3.getId_personaje());
	    }

	@Override
	protected String enlace() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected String cond(boolean m) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected String cond2(boolean m) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected String cond3() {
		// TODO Auto-generated method stub
		return null;
	}

	

}
