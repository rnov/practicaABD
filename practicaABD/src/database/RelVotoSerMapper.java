package database;
import model.UserKeys;
import model.RelVotoSer;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;




//Imports para pruebas en main
import javax.sql.DataSource;

import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;
//---

public class RelVotoSerMapper  extends AbstractMapper<RelVotoSer,UserKeys> {

	public RelVotoSerMapper(DataSource dataSource) {
		super(dataSource);
		// TODO Auto-generated constructor stub
	}

	@Override
	protected String getTableName() {
		// TODO Auto-generated method stub
		return  model.Constants.RELVOTOSER_TABLE;
	}

	@Override
	protected String[] getColumnNames() {
		// TODO Auto-generated method stub
		return new String[]{"id_ser", "id_voto"};
	}

	@Override
	protected RelVotoSer buildObject(ResultSet rs) throws SQLException {
		RelVotoSer result = new RelVotoSer();
		result.setId_ser(rs.getLong("id_ser"));
		result.setId_voto(rs.getLong("id_voto"));
		return result;
	}

	@Override
	protected Object[] serializeKey(UserKeys key) {
		// TODO Auto-generated method stub
		return new Object[] {key.getKey(), key.getKey2() };
	}

	@Override
	protected Object[] serializeObject(RelVotoSer object) {
		// TODO Auto-generated method stub
		return new Object[] {object.getId_ser(),object.getId_voto()};
	}

	@Override
	protected String[] getKeyColumnNames() {
		String[] keyCol={"id_ser","id_voto"};
		return keyCol;
	}

	@Override
	protected UserKeys getKey(RelVotoSer obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected void fill(PreparedStatement pst, RelVotoSer obj, boolean ins) {
		try {	
			pst.setLong(1,obj.getId_ser());// ? id_ser
			pst.setLong(2, obj.getId_voto());// ? id_voto
			if(!ins){//si es update necesitamos rellenar la condicion where con el nick .
				pst.setLong(3,obj.getId_ser());// ? id_ser
				pst.setLong(4, obj.getId_voto());// ? id_voto
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	@Override
	protected String pharseUpdate() {
		String colNam[] = getColumnNames();//adaptación a update al tener 2 claves
		String str = colNam[0]+"= ? ,"+colNam[1]+"= ? where "+colNam[0]+"= ? and "+colNam[1]+"= ?";
		return str;
	}

	@Override
	protected String pharseInsert() {
		String colNam[] = getColumnNames();
		String str = " ("+colNam[0]+","+colNam[1]+")"
		+ " values " + " ( ?  , ? ) ";
		return str;
	}

	public long getLastIndexInsert() {
		Connection con =null;
		PreparedStatement pst=null;
		ResultSet rs=null;
		Long result=null;
		try{
			con= ds.getConnection();//Attempts to establish a connection with the data source that this DataSource object represents.
			String sql="SELECT MAX( id_voto ) AS id FROM voto";
			pst = con.prepareStatement(sql);//An object that represents a pre-compiled SQL statement. 
			rs=pst.executeQuery();//Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query
			
			while(rs.next()){	
				result = rs.getLong("id");
			}
		}catch (SQLException e){
			e.printStackTrace();
		}finally{
			try{
				if(rs!=null) rs.close();
				if(pst!=null) pst.close();
				if(con!=null) con.close();
			}catch (Exception e){}
		}
		return result;
	}
	public static void main(String args[])

	        throws Exception
	    {
		//NOTA "GUARNING": Cuando se tienen varias keys, el orden que están en getColumnames() y getKeyColumNames() 
		//tiene que ser el mismo ya que se cogerán en orden para formas las condiciones el resultado de estas dos fun
	 
	 //creamos y configuramos un objeto data source:
	 MysqlDataSource mysqlDataSource = new MysqlDataSource();
	 mysqlDataSource.setServerName("localhost");
	 mysqlDataSource.setDatabaseName("practica11");
	 mysqlDataSource.setPort(3306);
	 mysqlDataSource.setUser("root");
	 mysqlDataSource.setPassword("");
	 //establecemos la conexión con la BBDD, esto ya se hace dentro de cada una de las funciones antes listadas por eso prescindimos
	 //Connection con = mysqlDataSource .getConnection();
	 
	 //creamos un usuarioMapper, pasandole un objeto DataSource
	 RelVotoSerMapper mapVotoSer = new RelVotoSerMapper( mysqlDataSource);
	
	 long idV = 9223372036854775776L;//La L "the compiler will try to parse the literal as an int, hence the error message"
	 long idS=9223372036854775001L;
	 
	 //Ejemplo Insert
	 //RelVotoSer cs=new RelVotoSer(idS,idV);
	 //mapVotoSer.Insert(cs);	
	 
	
	 //Ejemplo Update
	 //RelVotoSer cs2=new RelVotoSer(idS,idV);
	 //mapVotoSer.update(cs2);
	 
	 //obligatorio para utiliar id´s 
	 //UserKeys keyPer = new UserKeys(idS,idV);
	  
	 //Ejemplos Delete
	 //mapVotoSer.Delete(keyPer);
	 
	 //Ejemplos select
	 //RelVotoSer cs3= new RelVotoSer();
	 //cs3 = mapVotoSer.findById(keyPer);
	
	 //Ejemplo media
	 //float med = mapVotoSer.media(idS);
	 
	 // System.out.println(med);
	    }

	@Override
	protected String enlace() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected String cond(boolean m) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected String cond2(boolean m) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected String cond3() {
		// TODO Auto-generated method stub
		return null;
	}


}
